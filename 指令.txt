1.mkdir learngit  创建一个名为learngit的文件，可以加该文件的地址：例如/e/learngit

2.初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

         第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；

         第二步，使用命令git commit，完成。例如：git commit -m "wrote a readme file"；git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。

3.git status命令可以让我们时刻掌握仓库当前的状态，是否修改过某个文件；

4.git diff readme.txt    git diff顾名思义就是查看difference，显示的格式正是Unix通用的diff格式，可以看出对readme.txt作了什么修改；

5.首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

6.HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id或者HEAD^。

穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

7.场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

8.如果误删了某个文件，并且已经git rm，但是没有commit，那么需要先git reset HEAD file，还原到缓存区,然后再git checkout file到工作区；如果误删除后，并没有git rm和commit，那么该文件还在缓存区，直接git checkout file到工作区即可；

9.Git鼓励大量使用分支：

                       查看分支：git branch

                       创建分支：git branch <name>

                       切换分支：git checkout <name>

                       创建+切换分支：git checkout -b <name>

                       合并某分支到当前分支：git merge <name>

                       删除分支：git branch -d <name>
10.1234




